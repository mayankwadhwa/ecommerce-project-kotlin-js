{"version":3,"file":"ecommerce-kmp.js","sources":["../../../../../src/commonMain/kotlin/Api.kt","../../../../../ktor-client/ktor-client-core/common/src/io/ktor/client/request/builders.kt","collections/Collections.kt","generated/_Collections.kt","kotlin-wrappers-kotlin-react-dom-jsLegacy.js","kotlin-wrappers-kotlin-styled-jsLegacy.js","../../../../../ktor-client/ktor-client-core/common/src/io/ktor/client/statement/HttpStatement.kt","util/Standard.kt","../../../../../ktor-client/ktor-client-core/common/src/io/ktor/client/call/HttpClientCall.kt","../../../../../ktor-client/ktor-client-core/js/src/io/ktor/client/call/TypeInfoJs.kt","../../../../../src/commonMain/kotlin/SheetResponse.kt","../../../../../src/jsMain/kotlin/ComponentStyles.kt","../../../../../src/jsMain/kotlin/WelcomeStyles.kt","../../../../../src/jsMain/kotlin/app/App.kt","../../../../../src/jsMain/kotlin/client.kt","../../../../../src/jsMain/kotlin/components/Context.kt","../../../../../src/jsMain/kotlin/components/Default.kt","../../../../../src/jsMain/kotlin/components/Details.kt","../../../../../src/jsMain/kotlin/components/Modal.kt","../../../../../src/jsMain/kotlin/components/Navbar.kt","../../../../../src/jsMain/kotlin/components/Product.kt","../../../../../src/jsMain/kotlin/components/ProductList.kt","../../../../../src/jsMain/kotlin/components/Title.kt","../../../../../src/jsMain/kotlin/components/cart/Cart.kt","../../../../../src/jsMain/kotlin/components/cart/CartColumns.kt","../../../../../src/jsMain/kotlin/components/cart/CartItem.kt","../../../../../src/jsMain/kotlin/components/cart/CartList.kt","../../../../../src/jsMain/kotlin/components/cart/CartTotal.kt","../../../../../src/jsMain/kotlin/components/cart/EmptyCart.kt","../../../../../src/jsMain/kotlin/models/ProductModel.kt","../../../../../src/jsMain/kotlin/models/SheetResponse.kt","../../../../../src/jsMain/kotlin/ticker/Ticker.kt","../../../../../src/jsMain/kotlin/welcome.kt"],"sourcesContent":[null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\nimport kotlin.random.Random\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSampleWithCapacity\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Randomly shuffles elements in this list in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        this[j] = this.set(i, this[j])\n    }\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * Among equal elements of the given collection, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given collection with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the collection itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, C : Iterable<T>> C.onEachIndexed(action: (index: Int, T) -> Unit): C {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> List<T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"names":[],"mappings":"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"}